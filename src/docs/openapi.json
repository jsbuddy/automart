{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Automart API",
    "description" : "Auto Mart is an online market place for automobiles of diverse makes, model or body type. With Auto Mart, users can sell their cars or buy from trusted dealerships or private sellers.\n",
    "contact" : {
      "email" : "judecodes@yahoo.com"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/jsbuddy/automart/1.0.0",
    "description" : "SwaggerHub API Auto Mocking"
  } ],
  "tags" : [ {
    "name" : "user",
    "description" : "Operations about user"
  }, {
    "name" : "car",
    "description" : "Every car ads"
  }, {
    "name" : "order",
    "description" : "Access to Car orders"
  }, {
    "name" : "flag",
    "description" : "Operations about fraudulent cars"
  } ],
  "paths" : {
    "/flag" : {
      "post" : {
        "tags" : [ "flag" ],
        "summary" : "Report a vehicle as fraudulent",
        "operationId" : "createFlag",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Flag"
        },
        "responses" : {
          "201" : {
            "description" : "Created successfully"
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/car" : {
      "get" : {
        "tags" : [ "car" ],
        "summary" : "Get all cars",
        "operationId" : "AllCars",
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "available", "sold" ]
          }
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "State to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "available", "new" ]
          }
        }, {
          "name" : "manufacturer",
          "in" : "query",
          "description" : "Manufacturer to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "model",
          "in" : "query",
          "description" : "Model to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "bodyType",
          "in" : "query",
          "description" : "Body Type to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "car", "truck", "trailer", "van" ]
          }
        }, {
          "name" : "minPrice",
          "in" : "query",
          "description" : "Minimum price to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        }, {
          "name" : "maxPrice",
          "in" : "query",
          "description" : "Maximum price to filter by",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "number"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Cars found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Car"
                  }
                }
              }
            }
          },
          "204" : {
            "description" : "No cars"
          }
        }
      },
      "post" : {
        "tags" : [ "car" ],
        "summary" : "Create a car sale ad",
        "operationId" : "createCar",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Car"
        },
        "responses" : {
          "201" : {
            "description" : "Created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Car"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/car/{id}" : {
      "get" : {
        "tags" : [ "car" ],
        "summary" : "Finds a single car by id",
        "operationId" : "findCarById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID used to find car with matching ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Car"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Car ID"
          }
        }
      },
      "delete" : {
        "tags" : [ "car" ],
        "summary" : "Deletes a car",
        "operationId" : "deleteCar",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Car id to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted"
          },
          "400" : {
            "description" : "Invalid ID supplied"
          }
        }
      },
      "patch" : {
        "tags" : [ "car" ],
        "summary" : "Updates a car",
        "operationId" : "updateCar",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of car that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Car"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Car"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/order" : {
      "get" : {
        "tags" : [ "order" ],
        "summary" : "Returns all orders",
        "operationId" : "getOrders",
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Car"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "order" ],
        "summary" : "Create new order",
        "operationId" : "createOrder",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/Order"
        },
        "responses" : {
          "200" : {
            "description" : "Order created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/order/id" : {
      "patch" : {
        "tags" : [ "order" ],
        "summary" : "Updates an order's price",
        "operationId" : "updateOrder",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of order that needs to be updated",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Order updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Order"
                }
              }
            }
          },
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/auth/signup" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Sign up new user",
        "operationId" : "createUser",
        "requestBody" : {
          "description" : "Created user object",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "User created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid body supplied"
          }
        }
      }
    },
    "/auth/signin" : {
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Signs user into the system",
        "operationId" : "loginUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid username/password supplied"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "User" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "address" : {
            "type" : "string"
          },
          "isAdmin" : {
            "type" : "boolean",
            "default" : false
          }
        },
        "xml" : {
          "name" : "User"
        }
      },
      "Car" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "owner" : {
            "$ref" : "#/components/schemas/User"
          },
          "state" : {
            "type" : "string",
            "enum" : [ "new", "used" ]
          },
          "status" : {
            "type" : "string",
            "default" : "available",
            "enum" : [ "sold", "available" ]
          },
          "price" : {
            "type" : "integer"
          },
          "manufacturer" : {
            "type" : "string"
          },
          "model" : {
            "type" : "string"
          },
          "bodyType" : {
            "type" : "string",
            "enum" : [ "car", "truck", "trailer", "van" ]
          }
        },
        "xml" : {
          "name" : "Car"
        }
      },
      "Order" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "buyer" : {
            "$ref" : "#/components/schemas/User"
          },
          "car" : {
            "$ref" : "#/components/schemas/Car"
          },
          "amount" : {
            "type" : "number"
          },
          "status" : {
            "type" : "string",
            "default" : "pending",
            "enum" : [ "accepted", "pending", "rejected" ]
          }
        }
      },
      "Flag" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "car" : {
            "$ref" : "#/components/schemas/Car"
          },
          "reason" : {
            "type" : "string",
            "enum" : [ "pricing", "wierd demands" ]
          },
          "description" : {
            "type" : "string"
          }
        }
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "price" : {
            "type" : "number"
          }
        }
      },
      "body_1" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "The user's email address for login"
          },
          "password" : {
            "type" : "string",
            "description" : "The user's password for login in clear text"
          }
        }
      }
    },
    "requestBodies" : {
      "Car" : {
        "description" : "Car object that needs to be created",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Car"
            }
          }
        },
        "required" : true
      },
      "CarArray" : {
        "description" : "List of Car object",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Car"
              }
            }
          }
        },
        "required" : true
      },
      "Order" : {
        "description" : "Order object that needs to be created",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Order"
            }
          }
        },
        "required" : true
      },
      "Flag" : {
        "description" : "Flag object that needs to be created",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/Flag"
            }
          }
        },
        "required" : true
      }
    }
  }
}